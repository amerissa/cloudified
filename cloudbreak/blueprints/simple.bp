{
  "Blueprints": {
    "blueprint_name": "hdp3",
    "stack_name": "HDP",
    "stack_version": "3.0"
  },
  "settings": [
  ],
  "configurations": [
    {
      "core-site": {
        "properties": {
          "fs.s3a.access.key": "{{{s3key}}}",
          "fs.s3a.secret.key": "{{{s3secret}}}",
          "fs.s3.buffer.dir" : "/hadoopfs/fs1/buffer"
        }
      }
    },
    {
      "superset-env": {
        "properties": {
          "superset_admin_password": "{{{password}}}",
          "superset_admin_username": "cloudbreak",
          "superset_admin_lastname": "admin",
          "superset_admin_email": "identity.user@email.com",
          "superset_admin_firstname": "username"
        }
      }
    },
    {
      "nifi-ambari-config": {
        "nifi.security.encrypt.configuration.password": "{{{password}}}",
        "nifi.max_mem": "24g"
      }
    },
    {
      "nifi-bootstrap-env" : {
        "properties_attributes" : { },
        "properties" : {
          "content" : "\n#\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n# Java command to use when running NiFi\njava=java\n\n# Username to use when running NiFi. This value will be ignored on Windows.\nrun.as={{nifi_user}}\n##run.as=root\n\n# Configure where NiFi's lib and conf directories live\nlib.dir={{nifi_install_dir}}/lib\nconf.dir={{nifi_config_dir}}\n\n# How long to wait after telling NiFi to shutdown before explicitly killing the Process\ngraceful.shutdown.seconds=20\n\n{% if security_enabled %}\njava.arg.0=-Djava.security.auth.login.config={{nifi_jaas_conf}}\n{% endif %}\n\n# Disable JSR 199 so that we can use JSP's without running a JDK\njava.arg.1=-Dorg.apache.jasper.compiler.disablejsr199=true\n\n# JVM memory settings\njava.arg.2=-Xms{{nifi_initial_mem}}\njava.arg.3=-Xmx{{nifi_max_mem}}\n\n# Enable Remote Debugging\n#java.arg.debug=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000\n\njava.arg.4=-Djava.net.preferIPv4Stack=true\n\n# allowRestrictedHeaders is required for Cluster/Node communications to work properly\njava.arg.5=-Dsun.net.http.allowRestrictedHeaders=true\njava.arg.6=-Djava.protocol.handler.pkgs=sun.net.www.protocol\n\n# The G1GC is still considered experimental but has proven to be very advantageous in providing great\n# performance without significant \"stop-the-world\" delays.\njava.arg.13=-XX:+UseG1GC\n\n#Set headless mode by default\njava.arg.14=-Djava.awt.headless=true\n\n#Ambari Metrics Collector URL - passed in to flow.xml for AmbariReportingTask\njava.arg.15=-Dambari.metrics.collector.url=http://{{metrics_collector_host}}:{{metrics_collector_port}}/ws/v1/timeline/metrics\n\n#Application ID - used in flow.xml - passed into flow.xml for AmbariReportingTask\njava.arg.16=-Dambari.application.id=nifi\n\n#Sets the provider of SecureRandom to /dev/urandom to prevent blocking on VMs\njava.arg.17=-Djava.security.egd=file:/dev/urandom\n\n# Requires JAAS to use only the provided JAAS configuration to authenticate a Subject, without using any \"fallback\" methods (such as prompting for username/password)\n# Please see https://docs.oracle.com/javase/8/docs/technotes/guides/security/jgss/single-signon.html, section \"EXCEPTIONS TO THE MODEL\"\njava.arg.18=-Djavax.security.auth.useSubjectCredsOnly=true\n\n###\n# Notification Services for notifying interested parties when NiFi is stopped, started, dies\n###\n\n# XML File that contains the definitions of the notification services\nnotification.services.file={{nifi_config_dir}}/bootstrap-notification-services.xml\n\n# In the case that we are unable to send a notification for an event, how many times should we retry?\nnotification.max.attempts=5\n\n# Comma-separated list of identifiers that are present in the notification.services.file; which services should be used to notify when NiFi is started?\n#nifi.start.notification.services=email-notification\n\n# Comma-separated list of identifiers that are present in the notification.services.file; which services should be used to notify when NiFi is stopped?\n#nifi.stop.notification.services=email-notification\n\n# Comma-separated list of identifiers that are present in the notification.services.file; which services should be used to notify when NiFi dies?\n#nifi.dead.notification.services=email-notification"
        }
      }
    },
    {
      "kafka-broker":{
        "properties": {
        "log.dirs" : "/hadoop/fs/fs1/kafka",
        "auto.create.topics.enable" : "true"
        }
      }
    },
    {
      "yarn-hbase-env": {
        "hbase_java_io_tmpdir":"/hadoopfs/fs1/yarn"
      }
    },
    {
      "nifi-properties": {
        "nifi.sensitive.props.key": "{{{password}}}",
        "nifi.security.identity.mapping.pattern.kerb": "^(.*?)@(.*?)$",
        "nifi.security.identity.mapping.value.kerb": "$1",
        "nifi.security.identity.mapping.pattern.dn": "^[Cc][Nn]=(.*?),(.*?)$",
        "nifi.security.identity.mapping.value.dn": "$1"
      }
    },
    {
      "nifi-ambari-ssl-config": {
        "nifi.toolkit.tls.token": "{{{password}}}",
        "nifi.node.ssl.isenabled": "true",
        "nifi.initial.admin.identity" : "cloudbreak",
        "nifi.toolkit.dn.prefix": "CN=",
        "nifi.toolkit.dn.suffix": ", OU=Cloudified"
      }
    },
    {
      "hdfs-site": {
        "dfs.namenode.safemode.threshold-pct": "0.99"
      }
    },
    {
      "superset": {
        "properties_attributes": {},
        "properties": {
          "SECRET_KEY": "{{{password}}}",
          "SUPERSET_DATABASE_TYPE": "sqlite"
        }
      }
    },
    {
      "knox-env": {
        "properties_attributes": {},
        "properties": {
          "knox_master_secret": "{{{password}}}"
        }
      }
    },
    {
      "gateway-site": {
        "properties": {
          "gateway.gateway.conf.dir": "deployments",
          "gateway.hadoop.kerberos.secured": "false",
          "gateway.path": "gateway",
          "gateway.port": "8443"
        }
      }
    },
    {
      "hive-site": {
        "hive.exec.compress.output": "true",
        "hive.merge.mapfiles": "true",
        "hive.server2.tez.initialize.default.sessions": "true",
        "hive.server2.transport.mode": "binary",
        "hive.server2.enable.doAs" : "false"
      }
    },
    {
      "mapred-site": {
        "mapreduce.job.reduce.slowstart.completedmaps": "0.7",
        "mapreduce.map.output.compress": "true",
        "mapreduce.output.fileoutputformat.compress": "true"
      }
    },
    {
  "capacity-scheduler" : {
    "properties_attributes" : { },
    "properties" : {
      "yarn.scheduler.capacity.schedule-asynchronously.maximum-threads" : "1",
      "yarn.scheduler.capacity.root.acl_submit_applications" : "yarn,ambari-qa,hive,cloudbreak",
      "yarn.scheduler.capacity.root.accessible-node-labels" : "*",
      "yarn.scheduler.capacity.default.minimum-user-limit-percent" : "100",
      "yarn.scheduler.capacity.maximum-am-resource-percent" : "0.2",
      "yarn.scheduler.capacity.root.acl_administer_queue" : "yarn,spark,hive,cloudbreak",
      "yarn.scheduler.capacity.root.default.acl_administer_jobs" : "yarn",
      "yarn.scheduler.capacity.resource-calculator" : "org.apache.hadoop.yarn.util.resource.DefaultResourceCalculator",
      "yarn.scheduler.capacity.root.default.capacity" : "100",
      "yarn.scheduler.capacity.root.default.user-limit-factor" : "1",
      "yarn.scheduler.capacity.root.queues" : "default",
      "yarn.scheduler.capacity.root.capacity" : "100",
      "yarn.scheduler.capacity.root.default.acl_submit_applications" : "yarn,yarn-ats",
      "yarn.scheduler.capacity.root.default.maximum-capacity" : "100",
      "yarn.scheduler.capacity.schedule-asynchronously.enable" : "true",
      "yarn.scheduler.capacity.node-locality-delay" : "40",
      "yarn.scheduler.capacity.root.default.acl_administer_queue" : "yarn",
      "yarn.scheduler.capacity.maximum-applications" : "10000",
      "yarn.scheduler.capacity.schedule-asynchronously.scheduling-interval-ms" : "10",
      "yarn.scheduler.capacity.root.default.state" : "RUNNING"
    }
  }
}
  ],
  "host_groups": [
    {
      "name": "master",
      "configurations": [],
      "components": [
        {
          "name": "APP_TIMELINE_SERVER"
        },
        {
          "name": "HDFS_CLIENT"
        },
        {
          "name": "HISTORYSERVER"
        },
        {
          "name": "HIVE_CLIENT"
        },
        {
          "name": "HIVE_METASTORE"
        },
        {
          "name": "HIVE_SERVER"
        },
        {
          "name": "JOURNALNODE"
        },
        {
          "name": "MAPREDUCE2_CLIENT"
        },
        {
          "name": "METRICS_COLLECTOR"
        },
        {
          "name": "METRICS_MONITOR"
        },
        {
          "name": "NAMENODE"
        },
        {
          "name": "RESOURCEMANAGER"
        },
        {
          "name": "SECONDARY_NAMENODE"
        },
        {
          "name": "SPARK2_CLIENT"
        },
        {
          "name": "SPARK2_JOBHISTORYSERVER"
        },
        {
          "name": "TEZ_CLIENT"
        },
        {
          "name": "YARN_CLIENT"
        },
        {
          "name": "ZOOKEEPER_CLIENT"
        },
        {
          "name": "ZOOKEEPER_SERVER"
        }
      ],
      "cardinality": "1"
    },
    {
      "name": "worker",
      "configurations": [],
      "components": [
        {
          "name": "HIVE_CLIENT"
        },
        {
          "name": "TEZ_CLIENT"
        },
        {
          "name": "SPARK2_CLIENT"
        },
        {
          "name": "DATANODE"
        },
        {
          "name": "METRICS_MONITOR"
        },
        {
          "name": "NODEMANAGER"
        }
      ],
      "cardinality": "1+"
    },
    {
      "name": "compute",
      "configurations": [],
      "components": [
        {
          "name": "HIVE_CLIENT"
        },
        {
          "name": "TEZ_CLIENT"
        },
        {
          "name": "SPARK2_CLIENT"
        },
        {
          "name": "METRICS_MONITOR"
        },
        {
          "name": "NODEMANAGER"
        }
      ],
      "cardinality": "1+"
    },
    {
      "name": "gateway",
      "configurations": [],
      "cardinality": "1+",
      "components": [
        {
          "name": "SUPERSET"
        },
        {
          "name": "METRICS_MONITOR"
        },
        {
          "name": "HIVE_CLIENT"
        },
        {
          "name": "ZEPPELIN_MASTER"
        },
        {
          "name": "LIVY2_SERVER"
        },
        {
          "name": "TEZ_CLIENT"
        },
        {
          "name": "SPARK2_CLIENT"
        },
        {
          "name": "HDFS_CLIENT"
        }
      ]
    },
    {
      "name": "nifi",
      "configurations": [],
      "cardinality": "1+",
      "components": [
        {
          "name": "NIFI_MASTER"
        },
        {
          "name": "NIFI_CA"
        },
        {
          "name": "METRICS_MONITOR"
        }
      ]
    },
    {
      "name": "kafka",
      "configurations": [],
      "cardinality": "1+",
      "components": [
        {
          "name": "KAFKA_BROKER"
        },
        {
          "name": "METRICS_MONITOR"
        }
      ]
    }
  ]
}
